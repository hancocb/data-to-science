import base64
import os
import re
import uuid
from pathlib import Path

from geojson_pydantic import Feature
from sqlalchemy.orm import Session

from app import crud
from app.core.config import settings
from app.utils.MapMaker import MapMaker


def create_project_field_preview(project_id: uuid.UUID, features: list[Feature]) -> str:
    """Create preview image of project field boundary.

    Args:
        project_id (uuid.UUID4): Project ID.
        features (list[Feature]): GeoJSON features that represent field boundary.

    Returns:
        str: Path to generated preview image.
    """
    # Set output path for preview map
    if os.environ.get("RUNNING_TESTS") == "1":
        project_map_path = f"{settings.TEST_STATIC_DIR}/projects/{project_id}"
    else:
        project_map_path = f"{settings.STATIC_DIR}/projects/{project_id}"
    # Create project directory if needed, remove any existing preview maps
    if not os.path.exists(project_map_path):
        os.makedirs(project_map_path)
    if os.path.exists(os.path.join(project_map_path, "preview_map.png")):
        os.remove(os.path.join(project_map_path, "preview_map.png"))
    # Generate project map with provided coordinates
    project_map = MapMaker(features=features, outpath=project_map_path)
    project_map.save()
    return project_map.preview_img


def create_vector_layer_preview(
    project_id: uuid.UUID, layer_id: str, features: list[Feature]
) -> str:
    """Create preview image of vector layer.

    Args:
        project_id (uuid.UUID4): Project ID.
        layer_id (str): Unique layer ID for FeatureCollection.
        features (list[Feature]): GeoJSON features that represent vector layer shapes.

    Returns:
        str: Path to generated preview image.
    """
    # Set output path for preview image
    if os.environ.get("RUNNING_TESTS") == "1":
        preview_path = (
            f"{settings.TEST_STATIC_DIR}/projects/{project_id}/vector/{layer_id}"
        )
    else:
        preview_path = f"{settings.STATIC_DIR}/projects/{project_id}/vector/{layer_id}"
    # Create vector directory if needed, remove any existing preview for this layer
    if not os.path.exists(preview_path):
        os.makedirs(preview_path)
    # Full path to preview image
    preview_img = os.path.join(preview_path, "preview.png")
    # Skip creating preview image if one already exists
    if not os.path.exists(os.path.join(preview_path, "preview.png")):
        # Generate preview with provided coordinates
        vector_layer_preview = MapMaker(features=features, outpath=preview_path)
        vector_layer_preview.save(outname="preview.png")

    return preview_img


def is_valid_uuid(id: str) -> bool:
    """Checks if the provided ID is a version 4 UUID.

    Args:
        id (str): ID to check.

    Returns:
        bool: True if ID is valid ver. 4 UUID, False otherwise.
    """
    try:
        uuid.UUID(id, version=4)
        return True
    except ValueError:
        return False


def is_valid_api_key(api_key: str) -> bool:
    """Checks if API Key generated by secrets.token_urlsafe() is valid.

    Args:
        api_key (str): API key to check.

    Returns:
        bool: True if API key is valid, False otherwise.
    """
    if not re.fullmatch(r"^[A-Za-z0-9\-_]+$", api_key):
        return False
    try:
        padding = "=" * (-len(api_key) % 4)
        decoded_bytes = base64.urlsafe_b64decode(api_key + padding)
        encoded_key = (
            base64.urlsafe_b64encode(decoded_bytes).rstrip(b"=").decode("utf-8")
        )
        return api_key == encoded_key
    except Exception:
        return False


def get_data_product_dir(project_id: str, flight_id: str, data_product_id: str) -> Path:
    """Construct path to directory that will store uploaded data product.

    Args:
        project_id (str): Project ID associated with data product.
        flight_id (str): Flight ID associated with data product.
        data_product_id (str): ID for data product.

    Returns:
        Path: Full path to data product directory.
    """
    # get root static path
    if os.environ.get("RUNNING_TESTS") == "1":
        data_product_dir = Path(settings.TEST_STATIC_DIR)
    else:
        data_product_dir = Path(settings.STATIC_DIR)
    # construct path to project/flight/dataproduct
    data_product_dir = data_product_dir / "projects" / project_id
    data_product_dir = data_product_dir / "flights" / flight_id
    data_product_dir = data_product_dir / "data_products" / data_product_id
    # create folder for data product
    if not os.path.exists(data_product_dir):
        os.makedirs(data_product_dir)

    return data_product_dir


def get_indoor_project_data_dir(
    indoor_project_id: str, indoor_project_data_id: str
) -> Path:
    """Construct path to directory that will store uploaded indoor project data.

    Args:
        indoor_project_id (str): Indoor project ID associated with indoor project.
        indoor_project_data_id (str): ID for indoor project data.

    Returns:
        Path: Full path to indoor project data directory.
    """
    # get root static path
    if os.environ.get("RUNNING_TESTS") == "1":
        indoor_project_data_dir = Path(settings.TEST_STATIC_DIR)
    else:
        indoor_project_data_dir = Path(settings.STATIC_DIR)
    # construct path to indoor_project/indoor_project_data
    indoor_project_data_dir = (
        indoor_project_data_dir / "indoor_projects" / indoor_project_id
    )
    indoor_project_data_dir = (
        indoor_project_data_dir / "uploaded" / indoor_project_data_id
    )
    # create folder for indoor project data
    if not os.path.exists(indoor_project_data_dir):
        os.makedirs(indoor_project_data_dir)

    return indoor_project_data_dir


def str_to_bool(value: str | bool) -> bool:
    """Converts a boolean str into a boolean object.

    Args:
        value (str | bool): String value to convert to bool or bool value.

    Raises:
        ValueError: Raised if string value does not match a boolean value.

    Returns:
        bool: Returns True if string value matched one of the values in the "True" set.
    """
    # If already a bool object, return it
    if isinstance(value, bool):
        return value

    if value.lower() in {"1", "true"}:
        return True
    elif value.lower() in {"0", "false"}:
        return False
    else:
        raise ValueError(f"Invalid boolean string: {value}")


def get_static_dir() -> str:
    """Returns path to static directory.

    Returns:
        str: Static directory path.
    """
    if os.environ.get("RUNNING_TESTS") == "1":
        return settings.TEST_STATIC_DIR
    else:
        return settings.STATIC_DIR


def get_user_name_and_email(db: Session, user_id: uuid.UUID) -> str:
    """Return name and email associated with user id.

    Args:
        db (Session): Database session.
        user_id (UUID): User id.

    Returns:
        str: Name and email of user or 'Unknown.'
    """
    user = crud.user.get(db, id=user_id)
    if user:
        return f"{user.first_name} {user.last_name} <{user.email}>"
    else:
        return "Unknown"
