"""rename "id" column to "feature_id"

Revision ID: 4834cb625e90
Revises: 257669f1a6b6
Create Date: 2024-12-02 19:46:29.996927

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4834cb625e90'
down_revision: str | None = '257669f1a6b6'
branch_labels: str | None = None
depends_on: str | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # add the new 'feature_id' column to 'vector_layers'
    op.add_column('vector_layers', sa.Column('feature_id', sa.UUID(), nullable=True))

    # copy values from 'id' to 'feature_id'
    op.execute('UPDATE vector_layers SET feature_id = id')

    # make 'feature_id' NOT NULL
    op.alter_column('vector_layers', 'feature_id', nullable=False)

    # add a unique constraint or primary key for 'feature_id'
    op.create_unique_constraint('uq_vector_layers_feature_id', 'vector_layers', ['feature_id'])

    # add the new 'vector_layer_feature_id' column to 'data_product_metadata'
    op.add_column('data_product_metadata', sa.Column('vector_layer_feature_id', sa.UUID(), nullable=True))

    # copy values from 'vector_layer_id' to 'vector_layer_feature_id'
    op.execute('UPDATE data_product_metadata SET vector_layer_feature_id = vector_layer_id')

    # drop the old foreign key and unique constraint
    op.drop_constraint('data_product_metadata_vector_layer_id_fkey', 'data_product_metadata', type_='foreignkey')
    op.drop_constraint('unique_metadata', 'data_product_metadata', type_='unique')

    # add the new foreign key constraint and unique constraint
    op.create_foreign_key(
        None, 'data_product_metadata', 'vector_layers', ['vector_layer_feature_id'], ['feature_id']
    )
    op.create_unique_constraint(
        'unique_metadata', 'data_product_metadata', ['data_product_id', 'vector_layer_feature_id', 'category']
    )

    # drop the old 'vector_layer_id' column
    op.drop_column('data_product_metadata', 'vector_layer_id')

    # drop the old 'id' column
    op.drop_column('vector_layers', 'id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # add old 'id' column and set as NULLABLE
    op.add_column('vector_layers', sa.Column('id', sa.UUID(), autoincrement=False, nullable=True))

    # update old 'id' column with values from 'feature_id' column
    op.execute('UPDATE vector_layers SET id = feature_id')
    
    # make 'id' column NOT NULL after updating the values
    op.alter_column('vector_layers', 'id', nullable=False)

    # add a unique constraint or primary key for 'id'
    op.create_unique_constraint('uq_vector_layers_id', 'vector_layers', ['id'])

    # update 'data_product_metadata' to use old 'id' column
    op.add_column('data_product_metadata', sa.Column('vector_layer_id', sa.UUID(), nullable=True))
    op.execute('UPDATE data_product_metadata SET vector_layer_id = vector_layer_feature_id')
    op.alter_column('data_product_metadata', 'vector_layer_id', nullable=True) 

    # update constraints
    op.drop_constraint('data_product_metadata_vector_layer_feature_id_fkey', 'data_product_metadata', type_='foreignkey')
    op.create_foreign_key(None, 'data_product_metadata', 'vector_layers', ['vector_layer_id'], ['id'])
    op.drop_constraint('unique_metadata', 'data_product_metadata', type_='unique')
    op.create_unique_constraint('unique_metadata', 'data_product_metadata', ['data_product_id', 'vector_layer_id', 'category'])
    op.drop_column('data_product_metadata', 'vector_layer_feature_id')

    # drop new 'feature_id' column
    op.drop_column('vector_layers', 'feature_id')
    # ### end Alembic commands ###
