"""add annotation and tag tables

Revision ID: 88583aa69cf0
Revises: 884e43c58053
Create Date: 2025-09-15 14:30:55.548283

"""

from alembic import op
import sqlalchemy as sa
from geoalchemy2 import Geometry
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "88583aa69cf0"
down_revision: str | None = "884e43c58053"
branch_labels: str | None = None
depends_on: str | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tags",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "uq_tag_name_ci",
        "tags",
        [sa.text("lower(name)")],
        unique=True,
    )
    op.create_geospatial_table(
        "annotations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "geom",
            Geometry(
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "visibility",
            sa.Enum("OWNER", "PROJECT", name="visibility_scope"),
            server_default=sa.text("'OWNER'"),
            nullable=False,
        ),
        sa.Column("data_product_id", sa.UUID(), nullable=False),
        sa.Column("created_by_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(["created_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["data_product_id"], ["data_products.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_annotations_geom",
        "annotations",
        ["geom"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_index(
        op.f("ix_annotations_created_by_id"),
        "annotations",
        ["created_by_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_annotations_data_product_id"),
        "annotations",
        ["data_product_id"],
        unique=False,
    )
    op.create_table(
        "annotation_attachments",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("original_filename", sa.String(length=255), nullable=False),
        sa.Column("filepath", sa.Text(), nullable=False),
        sa.Column("content_type", sa.String(length=127), nullable=False),
        sa.Column("size_bytes", sa.BigInteger(), nullable=False),
        sa.Column("width_px", sa.Integer(), nullable=True),
        sa.Column("height_px", sa.Integer(), nullable=True),
        sa.Column("duration_seconds", sa.Float(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("annotation_id", sa.UUID(), nullable=False),
        sa.CheckConstraint("size_bytes >= 0", name="check_size_bytes"),
        sa.ForeignKeyConstraint(
            ["annotation_id"], ["annotations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_annotation_attachments_annotation_id"),
        "annotation_attachments",
        ["annotation_id"],
        unique=False,
    )
    op.create_table(
        "annotation_tags",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("annotation_id", sa.UUID(), nullable=False),
        sa.Column("tag_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["annotation_id"], ["annotations.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["tag_id"], ["tags.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "annotation_id", "tag_id", name="uq_annotation_tag_annotation_id_tag_id"
        ),
    )
    op.create_index(
        op.f("ix_annotation_tags_annotation_id"),
        "annotation_tags",
        ["annotation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_annotation_tags_tag_id"), "annotation_tags", ["tag_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop annotation_tags (no enum dependency there)
    op.drop_index(op.f("ix_annotation_tags_tag_id"), table_name="annotation_tags")
    op.drop_index(
        op.f("ix_annotation_tags_annotation_id"), table_name="annotation_tags"
    )
    op.drop_table("annotation_tags")

    # Drop attachments
    op.drop_index(
        op.f("ix_annotation_attachments_annotation_id"),
        table_name="annotation_attachments",
    )
    op.drop_table("annotation_attachments")

    # Drop indexes on annotations, then the spatial index, then the table itself
    op.drop_index(op.f("ix_annotations_data_product_id"), table_name="annotations")
    op.drop_index(op.f("ix_annotations_created_by_id"), table_name="annotations")
    op.drop_geospatial_index(
        "idx_annotations_geom",
        table_name="annotations",
        postgresql_using="gist",
        column_name="geom",
    )
    op.drop_geospatial_table("annotations")

    # Now that no columns depend on the enum, drop it
    op.execute("DROP TYPE IF EXISTS public.visibility_scope")

    # Finally drop tags
    op.drop_index("uq_tag_name_ci", table_name="tags")
    op.drop_table("tags")
    # ### end Alembic commands ###
